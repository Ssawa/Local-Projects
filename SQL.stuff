CREATE TABLE TOKENS (ID SERIAL PRIMARY KEY, NAME TEXT);

ALTER TABLE TOKENS ALTER COLUMN NAME SET NOT NULL;

CREATE TABLE QUESTIONS (ID SERIAL PRIMARY KEY, QUESTION TEXT);

CREATE TABLE TOKEN_QUESTION_MAP (ID SERIAL PRIMARY KEY, QUESTION_ID INTEGER REFERENCES QUESTIONS(ID), TOKEN_ID INTEGER REFERENCES TOKENS(ID), YES_VALUE INTEGER NOT NUL DEFAULT 0, NO_VALUE INTEGER NOT NULL DEFAULT 0);

ALTER TABLE TOKEN_QUESTION_MAP ALTER COLUMN YES_VALUE SET DEFAULT 0;

INSERT INTO QUESTIONS (QUESTION) VALUES ("Should we build more schools?");

INSERT INTO TOKEN_QUESTION_MAP (QUESTION_ID, TOKEN_ID, YES_VALUE, NO_VALUE) VALUES (1, 6, 0, 0);

ALTER TABLE TOKENS RENAME NAME TO TOKEN;

CREATE OR REPLACE FUNCTION add_new_token()
RETURNS trigger AS $BODY$
DECLARE
	question record;
BEGIN
	FOR question in SELECT * FROM QUESTIONS
	LOOP
		INSERT INTO TOKEN_QUESTION_MAP (QUESTION_ID, TOKEN_ID, YES_VALUE, NO_VALUE) VALUES (question.ID, NEW.ID, 0, 0);
	END LOOP;
	RETURN NEW;
END;
$BODY$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION add_new_question()
RETURNS trigger AS $BODY$
DECLARE
	token record;
BEGIN
	FOR token in SELECT * FROM TOKENS
	LOOP
		INSERT INTO TOKEN_QUESTION_MAP (QUESTION_ID, TOKEN_ID, YES_VALUE, NO_VALUE) VALUES (NEW.ID, token.ID, 0, 0);
	END LOOP;
	RETURN NEW;
END;
$BODY$
LANGUAGE 'plpgsql';


CREATE TRIGGER new_question
	AFTER INSERT
	ON QUESTIONS
	FOR EACH ROW
	EXECUTE PROCEDURE add_new_question();